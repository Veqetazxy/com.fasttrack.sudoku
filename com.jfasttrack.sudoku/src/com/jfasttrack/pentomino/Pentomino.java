/*
  Pentomino.java

  Copyright (C) 2008-2009 by Pete Boton, www.jfasttrack.com

  This file is part of Dancing Links Sudoku.

  Dancing Links Sudoku is free for non-commercial use. Contact the author for commercial use.

  You can redistribute and/or modify this software only under the terms of the GNU General Public
  License as published by the Free Software Foundation. Version 2 of the License or (at your option)
  any later version may be used.

  This program is distributed in the hope that it will be useful and enjoyable, but WITH NO
  WARRANTY; not even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with this program; if not,
  write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307.
*/

package com.jfasttrack.pentomino;




/**
 * A <code>Pentomino</code> is a collection of 5 orthogonally connected squares. This class defines
 * the 12 possible pentominoes in each possible orientation.
 *
 * @author   Pete Boton
 * @version  2009/05
 */
final class Pentomino {

    /** The number of squares in a <code>Pentomino</code>. */
    static final int PENTOMINO_SIZE = 5;

    /**
     * A collection containing every possible <code>Pentomino</code>. This collection also contains
     * each possible rotation and inversion of each <code>Pentomino</code>.
     */
    static final Pentomino[][] ALL_PENTOMINOES = new Pentomino[][] {

        /*
         * If every possible orientation of each pentomino is included, the program will generate
         * every possible solution. That would include trivial solutions generated by rotating
         * and/or inverting other solutions.
         *
         * To remove the trivial solutions, one piece is included with only 2 of its 8 possible
         * orientations. The F pentomino was arbitrarily chosen for this.
         */

        // The F pentomino: using 2 of 8 possible orientations.
        {
            new Pentomino(new String[] {
                " FF",
                "FF ",
                " F ",
            }),
            new Pentomino(new String[] {
                " F ",
                "FFF",
                "  F",
            }),
/*
            new Pentomino(new String[] {
                " F ",
                " FF",
                "FF ",
            }),
            new Pentomino(new String[] {
                "F  ",
                "FFF",
                " F ",
            }),
            new Pentomino(new String[] {
                "FF ",
                " FF",
                " F ",
            }),
            new Pentomino(new String[] {
                "  F",
                "FFF",
                " F ",
            }),
            new Pentomino(new String[] {
                " F ",
                "FF ",
                " FF",
            }),
            new Pentomino(new String[] {
                " F ",
                "FFF",
                "F  ",
            }),
*/
        },

        // The I pentomino: 2 possible orientations.
        {
            new Pentomino(new String[] {
                "I",
                "I",
                "I",
                "I",
                "I",
            }),
            new Pentomino(new String[] {
                "IIIII",
            }),
        },

        // The L pentomino: 8 possible orientations.
        {
            new Pentomino(new String[] {
                "L ",
                "L ",
                "L ",
                "LL",
            }),
            new Pentomino(new String[] {
                "LLLL",
                "L",
            }),
            new Pentomino(new String[] {
                "LL",
                " L",
                " L",
                " L",
            }),
            new Pentomino(new String[] {
                "   L",
                "LLLL",
            }),
            new Pentomino(new String[] {
                " L",
                " L",
                " L",
                "LL",
            }),
            new Pentomino(new String[] {
                "L",
                "LLLL",
            }),
            new Pentomino(new String[] {
                "LL",
                "L",
                "L",
                "L",
            }),
            new Pentomino(new String[] {
                "LLLL",
                "   L",
            }),
        },

        // The N pentomino: 8 possible orientations.
        {
            new Pentomino(new String[] {
                "NNN",
                "  NN",
            }),
            new Pentomino(new String[] {
                " N",
                " N",
                "NN",
                "N",
            }),
            new Pentomino(new String[] {
                "NN",
                " NNN",
            }),
            new Pentomino(new String[] {
                " N",
                "NN",
                "N",
                "N",
            }),
            new Pentomino(new String[] {
                " NNN",
                "NN",
            }),
            new Pentomino(new String[] {
                "N",
                "NN",
                " N",
                " N",
            }),
            new Pentomino(new String[] {
                "  NN",
                "NNN",
            }),
            new Pentomino(new String[] {
                "N",
                "N",
                "NN",
                " N",
            }),
        },

        // The P pentomino: 8 possible orientations.
        {
            new Pentomino(new String[] {
                "PPP",
                "PP",
            }),
            new Pentomino(new String[] {
                "PP",
                "PP",
                " P",
            }),
            new Pentomino(new String[] {
                " PP",
                "PPP",
            }),
            new Pentomino(new String[] {
                "P",
                "PP",
                "PP",
            }),
            new Pentomino(new String[] {
                "PPP",
                " PP",
            }),
            new Pentomino(new String[] {
                " P",
                "PP",
                "PP",
            }),
            new Pentomino(new String[] {
                "PP",
                "PPP",
            }),
            new Pentomino(new String[] {
                "PP",
                "PP",
                "P",
            }),
        },

        // The T pentomino: 4 possible orientations.
        {
            new Pentomino(new String[] {
                "TTT",
                " T",
                " T",
            }),
            new Pentomino(new String[] {
                "  T",
                "TTT",
                "  T",
            }),
            new Pentomino(new String[] {
                " T ",
                " T ",
                "TTT",
            }),
            new Pentomino(new String[] {
                "T  ",
                "TTT",
                "T  ",
            }),
        },

        // The U pentomino: 4 possible orientations.
        {
            new Pentomino(new String[] {
                "UU",
                "U ",
                "UU",
            }),
            new Pentomino(new String[] {
                "UUU",
                "U U",
            }),
            new Pentomino(new String[] {
                "UU",
                " U",
                "UU",
            }),
            new Pentomino(new String[] {
                "U U",
                "UUU",
            }),
        },

        // The V pentomino: 4 possible orientations.
        {
            new Pentomino(new String[] {
                "V  ",
                "V  ",
                "VVV",
            }),
            new Pentomino(new String[] {
                "VVV",
                "V  ",
                "V  ",
            }),
            new Pentomino(new String[] {
                "VVV",
                "  V",
                "  V",
            }),
            new Pentomino(new String[] {
                "  V",
                "  V",
                "VVV",
            }),
        },

        // The W pentomino: 4 possible orientations.
        {
            new Pentomino(new String[] {
                "  W",
                " WW",
                "WW ",
            }),
            new Pentomino(new String[] {
                "W  ",
                "WW ",
                " WW",
            }),
            new Pentomino(new String[] {
                " WW",
                "WW ",
                "W  ",
            }),
            new Pentomino(new String[] {
                "WW ",
                " WW",
                "  W",
            }),
        },

        // The X pentomino: 1 possible orientation.
        {
            new Pentomino(new String[] {
                " X ",
                "XXX",
                " X ",
            }),
        },

        // The Y pentomino: 8 possible orientations.
        {
            new Pentomino(new String[] {
                "YYYY",
                "  Y ",
            }),
            new Pentomino(new String[] {
                " Y",
                " Y",
                "YY",
                " Y",
            }),
            new Pentomino(new String[] {
                " Y  ",
                "YYYY",
            }),
            new Pentomino(new String[] {
                "Y ",
                "YY",
                "Y ",
                "Y ",
            }),
            new Pentomino(new String[] {
                "YYYY",
                " Y  ",
            }),
            new Pentomino(new String[] {
                " Y",
                "YY",
                " Y",
                " Y",
            }),
            new Pentomino(new String[] {
                "  Y ",
                "YYYY",
            }),
            new Pentomino(new String[] {
                "Y ",
                "Y ",
                "YY",
                "Y ",
            }),
        },

        // The Z pentomino: 4 possible orientations.
        {
            new Pentomino(new String[] {
                "ZZ ",
                " Z ",
                " ZZ",
            }),
            new Pentomino(new String[] {
                "  Z",
                "ZZZ",
                "Z  ",
            }),
            new Pentomino(new String[] {
                " ZZ",
                " Z ",
                "ZZ ",
            }),
            new Pentomino(new String[] {
                "Z  ",
                "ZZZ",
                "  Z",
            }),
        },
    };

    /** The X offset of each square of this <code>Pentomino</code>. */
    private final int[] xOffsets = new int[PENTOMINO_SIZE];

    /** The Y offset of each square of this <code>Pentomino</code>. */
    private final int[] yOffsets = new int[PENTOMINO_SIZE];

    /**
     * Constructs a <code>Pentomino</code>.
     *
     * @param squares  Strings describing the squares that make up this <code>Pentomino</code>.
     */
    private Pentomino(final String[] squares) {
        int index = 0;
        for (int r = 0; r < squares.length; r++) {
            for (int c = 0; c < squares[r].length(); c++) {
                if (squares[r].charAt(c) != ' ') {
                    xOffsets[index] = c;
                    yOffsets[index] = r;
                    index++;
                }
            }
        }
    }

    /**
     * Gets an X offset of this <code>Pentomino</code>.
     *
     * @param index  The index of an offset.
     * @return       The requested X offset of this <code>Pentomino</code>.
     */
    public int getXOffset(final int index) {
        return xOffsets[index];
    }

    /**
     * Gets a Y offset of this <code>Pentomino</code>.
     *
     * @param index  The index of an offset.
     * @return       The Y offsets of this <code>Pentomino</code>.
     */
    public int getYOffset(final int index) {
        return yOffsets[index];
    }
}
